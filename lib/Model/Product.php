<?php
/**
 * Product
 *
 * PHP version 5
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */

/**
 * Prepaidforge API
 *
 * The public api for prepaidforge
 *
 * OpenAPI spec version: 1.0
 * 
 * Generated by: https://openapi-generator.tech
 * OpenAPI Generator version: 4.0.0-SNAPSHOT
 */

/**
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

namespace OpenAPI\Client\Model;

use \ArrayAccess;
use \OpenAPI\Client\ObjectSerializer;

/**
 * Product Class Doc Comment
 *
 * @category Class
 * @package  OpenAPI\Client
 * @author   OpenAPI Generator team
 * @link     https://openapi-generator.tech
 */
class Product implements ModelInterface, ArrayAccess
{
    const DISCRIMINATOR = null;

    /**
      * The original name of the model.
      *
      * @var string
      */
    protected static $openAPIModelName = 'Product';

    /**
      * Array of property to type mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPITypes = [
        'id' => 'int',
        'date_created' => '\DateTime',
        'date_updated' => '\DateTime',
        'sku' => 'string',
        'name' => 'string',
        'gtin' => 'string',
        'ean' => 'string',
        'brand' => 'string',
        'face_value' => '\OpenAPI\Client\Model\Money',
        'default_price' => '\OpenAPI\Client\Model\Money',
        'currency_code' => 'string',
        'is_currency_product' => 'bool',
        'image_url' => 'string',
        'active' => 'bool',
        'languages' => 'string[]',
        'countries' => 'string[]',
        'platforms' => 'string[]',
        'rating' => 'int',
        'product_type' => 'string',
        'vat_product' => 'bool',
        'categories' => 'string[]',
        'product_difference_hash' => 'int'
    ];

    /**
      * Array of property to format mappings. Used for (de)serialization
      *
      * @var string[]
      */
    protected static $openAPIFormats = [
        'id' => 'int64',
        'date_created' => 'date-time',
        'date_updated' => 'date-time',
        'sku' => null,
        'name' => null,
        'gtin' => null,
        'ean' => null,
        'brand' => null,
        'face_value' => null,
        'default_price' => null,
        'currency_code' => null,
        'is_currency_product' => null,
        'image_url' => null,
        'active' => null,
        'languages' => null,
        'countries' => null,
        'platforms' => null,
        'rating' => 'int32',
        'product_type' => null,
        'vat_product' => null,
        'categories' => null,
        'product_difference_hash' => 'int32'
    ];

    /**
     * Array of property to type mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPITypes()
    {
        return self::$openAPITypes;
    }

    /**
     * Array of property to format mappings. Used for (de)serialization
     *
     * @return array
     */
    public static function openAPIFormats()
    {
        return self::$openAPIFormats;
    }

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @var string[]
     */
    protected static $attributeMap = [
        'id' => 'id',
        'date_created' => 'dateCreated',
        'date_updated' => 'dateUpdated',
        'sku' => 'sku',
        'name' => 'name',
        'gtin' => 'gtin',
        'ean' => 'ean',
        'brand' => 'brand',
        'face_value' => 'faceValue',
        'default_price' => 'defaultPrice',
        'currency_code' => 'currencyCode',
        'is_currency_product' => 'isCurrencyProduct',
        'image_url' => 'imageUrl',
        'active' => 'active',
        'languages' => 'languages',
        'countries' => 'countries',
        'platforms' => 'platforms',
        'rating' => 'rating',
        'product_type' => 'productType',
        'vat_product' => 'vatProduct',
        'categories' => 'categories',
        'product_difference_hash' => 'productDifferenceHash'
    ];

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @var string[]
     */
    protected static $setters = [
        'id' => 'setId',
        'date_created' => 'setDateCreated',
        'date_updated' => 'setDateUpdated',
        'sku' => 'setSku',
        'name' => 'setName',
        'gtin' => 'setGtin',
        'ean' => 'setEan',
        'brand' => 'setBrand',
        'face_value' => 'setFaceValue',
        'default_price' => 'setDefaultPrice',
        'currency_code' => 'setCurrencyCode',
        'is_currency_product' => 'setIsCurrencyProduct',
        'image_url' => 'setImageUrl',
        'active' => 'setActive',
        'languages' => 'setLanguages',
        'countries' => 'setCountries',
        'platforms' => 'setPlatforms',
        'rating' => 'setRating',
        'product_type' => 'setProductType',
        'vat_product' => 'setVatProduct',
        'categories' => 'setCategories',
        'product_difference_hash' => 'setProductDifferenceHash'
    ];

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @var string[]
     */
    protected static $getters = [
        'id' => 'getId',
        'date_created' => 'getDateCreated',
        'date_updated' => 'getDateUpdated',
        'sku' => 'getSku',
        'name' => 'getName',
        'gtin' => 'getGtin',
        'ean' => 'getEan',
        'brand' => 'getBrand',
        'face_value' => 'getFaceValue',
        'default_price' => 'getDefaultPrice',
        'currency_code' => 'getCurrencyCode',
        'is_currency_product' => 'getIsCurrencyProduct',
        'image_url' => 'getImageUrl',
        'active' => 'getActive',
        'languages' => 'getLanguages',
        'countries' => 'getCountries',
        'platforms' => 'getPlatforms',
        'rating' => 'getRating',
        'product_type' => 'getProductType',
        'vat_product' => 'getVatProduct',
        'categories' => 'getCategories',
        'product_difference_hash' => 'getProductDifferenceHash'
    ];

    /**
     * Array of attributes where the key is the local name,
     * and the value is the original name
     *
     * @return array
     */
    public static function attributeMap()
    {
        return self::$attributeMap;
    }

    /**
     * Array of attributes to setter functions (for deserialization of responses)
     *
     * @return array
     */
    public static function setters()
    {
        return self::$setters;
    }

    /**
     * Array of attributes to getter functions (for serialization of requests)
     *
     * @return array
     */
    public static function getters()
    {
        return self::$getters;
    }

    /**
     * The original name of the model.
     *
     * @return string
     */
    public function getModelName()
    {
        return self::$openAPIModelName;
    }

    const PRODUCT_TYPE_MPV = 'MPV';
    const PRODUCT_TYPE_SUV = 'SUV';
    const PRODUCT_TYPE_CURRENCY = 'CURRENCY';
    const PRODUCT_TYPE_UNKNOWN = 'UNKNOWN';
    

    
    /**
     * Gets allowable values of the enum
     *
     * @return string[]
     */
    public function getProductTypeAllowableValues()
    {
        return [
            self::PRODUCT_TYPE_MPV,
            self::PRODUCT_TYPE_SUV,
            self::PRODUCT_TYPE_CURRENCY,
            self::PRODUCT_TYPE_UNKNOWN,
        ];
    }
    

    /**
     * Associative array for storing property values
     *
     * @var mixed[]
     */
    protected $container = [];

    /**
     * Constructor
     *
     * @param mixed[] $data Associated array of property values
     *                      initializing the model
     */
    public function __construct(array $data = null)
    {
        $this->container['id'] = isset($data['id']) ? $data['id'] : null;
        $this->container['date_created'] = isset($data['date_created']) ? $data['date_created'] : null;
        $this->container['date_updated'] = isset($data['date_updated']) ? $data['date_updated'] : null;
        $this->container['sku'] = isset($data['sku']) ? $data['sku'] : null;
        $this->container['name'] = isset($data['name']) ? $data['name'] : null;
        $this->container['gtin'] = isset($data['gtin']) ? $data['gtin'] : null;
        $this->container['ean'] = isset($data['ean']) ? $data['ean'] : null;
        $this->container['brand'] = isset($data['brand']) ? $data['brand'] : null;
        $this->container['face_value'] = isset($data['face_value']) ? $data['face_value'] : null;
        $this->container['default_price'] = isset($data['default_price']) ? $data['default_price'] : null;
        $this->container['currency_code'] = isset($data['currency_code']) ? $data['currency_code'] : null;
        $this->container['is_currency_product'] = isset($data['is_currency_product']) ? $data['is_currency_product'] : null;
        $this->container['image_url'] = isset($data['image_url']) ? $data['image_url'] : null;
        $this->container['active'] = isset($data['active']) ? $data['active'] : null;
        $this->container['languages'] = isset($data['languages']) ? $data['languages'] : null;
        $this->container['countries'] = isset($data['countries']) ? $data['countries'] : null;
        $this->container['platforms'] = isset($data['platforms']) ? $data['platforms'] : null;
        $this->container['rating'] = isset($data['rating']) ? $data['rating'] : null;
        $this->container['product_type'] = isset($data['product_type']) ? $data['product_type'] : null;
        $this->container['vat_product'] = isset($data['vat_product']) ? $data['vat_product'] : null;
        $this->container['categories'] = isset($data['categories']) ? $data['categories'] : null;
        $this->container['product_difference_hash'] = isset($data['product_difference_hash']) ? $data['product_difference_hash'] : null;
    }

    /**
     * Show all the invalid properties with reasons.
     *
     * @return array invalid properties with reasons
     */
    public function listInvalidProperties()
    {
        $invalidProperties = [];

        if ($this->container['sku'] === null) {
            $invalidProperties[] = "'sku' can't be null";
        }
        $allowedValues = $this->getProductTypeAllowableValues();
        if (!is_null($this->container['product_type']) && !in_array($this->container['product_type'], $allowedValues, true)) {
            $invalidProperties[] = sprintf(
                "invalid value for 'product_type', must be one of '%s'",
                implode("', '", $allowedValues)
            );
        }

        return $invalidProperties;
    }

    /**
     * Validate all the properties in the model
     * return true if all passed
     *
     * @return bool True if all properties are valid
     */
    public function valid()
    {
        return count($this->listInvalidProperties()) === 0;
    }


    /**
     * Gets id
     *
     * @return int|null
     */
    public function getId()
    {
        return $this->container['id'];
    }

    /**
     * Sets id
     *
     * @param int|null $id id
     *
     * @return $this
     */
    public function setId($id)
    {
        $this->container['id'] = $id;

        return $this;
    }

    /**
     * Gets date_created
     *
     * @return \DateTime|null
     */
    public function getDateCreated()
    {
        return $this->container['date_created'];
    }

    /**
     * Sets date_created
     *
     * @param \DateTime|null $date_created date_created
     *
     * @return $this
     */
    public function setDateCreated($date_created)
    {
        $this->container['date_created'] = $date_created;

        return $this;
    }

    /**
     * Gets date_updated
     *
     * @return \DateTime|null
     */
    public function getDateUpdated()
    {
        return $this->container['date_updated'];
    }

    /**
     * Sets date_updated
     *
     * @param \DateTime|null $date_updated date_updated
     *
     * @return $this
     */
    public function setDateUpdated($date_updated)
    {
        $this->container['date_updated'] = $date_updated;

        return $this;
    }

    /**
     * Gets sku
     *
     * @return string
     */
    public function getSku()
    {
        return $this->container['sku'];
    }

    /**
     * Sets sku
     *
     * @param string $sku sku
     *
     * @return $this
     */
    public function setSku($sku)
    {
        $this->container['sku'] = $sku;

        return $this;
    }

    /**
     * Gets name
     *
     * @return string|null
     */
    public function getName()
    {
        return $this->container['name'];
    }

    /**
     * Sets name
     *
     * @param string|null $name name
     *
     * @return $this
     */
    public function setName($name)
    {
        $this->container['name'] = $name;

        return $this;
    }

    /**
     * Gets gtin
     *
     * @return string|null
     */
    public function getGtin()
    {
        return $this->container['gtin'];
    }

    /**
     * Sets gtin
     *
     * @param string|null $gtin gtin
     *
     * @return $this
     */
    public function setGtin($gtin)
    {
        $this->container['gtin'] = $gtin;

        return $this;
    }

    /**
     * Gets ean
     *
     * @return string|null
     */
    public function getEan()
    {
        return $this->container['ean'];
    }

    /**
     * Sets ean
     *
     * @param string|null $ean ean
     *
     * @return $this
     */
    public function setEan($ean)
    {
        $this->container['ean'] = $ean;

        return $this;
    }

    /**
     * Gets brand
     *
     * @return string|null
     */
    public function getBrand()
    {
        return $this->container['brand'];
    }

    /**
     * Sets brand
     *
     * @param string|null $brand brand
     *
     * @return $this
     */
    public function setBrand($brand)
    {
        $this->container['brand'] = $brand;

        return $this;
    }

    /**
     * Gets face_value
     *
     * @return \OpenAPI\Client\Model\Money|null
     */
    public function getFaceValue()
    {
        return $this->container['face_value'];
    }

    /**
     * Sets face_value
     *
     * @param \OpenAPI\Client\Model\Money|null $face_value face_value
     *
     * @return $this
     */
    public function setFaceValue($face_value)
    {
        $this->container['face_value'] = $face_value;

        return $this;
    }

    /**
     * Gets default_price
     *
     * @return \OpenAPI\Client\Model\Money|null
     */
    public function getDefaultPrice()
    {
        return $this->container['default_price'];
    }

    /**
     * Sets default_price
     *
     * @param \OpenAPI\Client\Model\Money|null $default_price default_price
     *
     * @return $this
     */
    public function setDefaultPrice($default_price)
    {
        $this->container['default_price'] = $default_price;

        return $this;
    }

    /**
     * Gets currency_code
     *
     * @return string|null
     */
    public function getCurrencyCode()
    {
        return $this->container['currency_code'];
    }

    /**
     * Sets currency_code
     *
     * @param string|null $currency_code currency_code
     *
     * @return $this
     */
    public function setCurrencyCode($currency_code)
    {
        $this->container['currency_code'] = $currency_code;

        return $this;
    }

    /**
     * Gets is_currency_product
     *
     * @return bool|null
     */
    public function getIsCurrencyProduct()
    {
        return $this->container['is_currency_product'];
    }

    /**
     * Sets is_currency_product
     *
     * @param bool|null $is_currency_product is_currency_product
     *
     * @return $this
     */
    public function setIsCurrencyProduct($is_currency_product)
    {
        $this->container['is_currency_product'] = $is_currency_product;

        return $this;
    }

    /**
     * Gets image_url
     *
     * @return string|null
     */
    public function getImageUrl()
    {
        return $this->container['image_url'];
    }

    /**
     * Sets image_url
     *
     * @param string|null $image_url image_url
     *
     * @return $this
     */
    public function setImageUrl($image_url)
    {
        $this->container['image_url'] = $image_url;

        return $this;
    }

    /**
     * Gets active
     *
     * @return bool|null
     */
    public function getActive()
    {
        return $this->container['active'];
    }

    /**
     * Sets active
     *
     * @param bool|null $active active
     *
     * @return $this
     */
    public function setActive($active)
    {
        $this->container['active'] = $active;

        return $this;
    }

    /**
     * Gets languages
     *
     * @return string[]|null
     */
    public function getLanguages()
    {
        return $this->container['languages'];
    }

    /**
     * Sets languages
     *
     * @param string[]|null $languages languages
     *
     * @return $this
     */
    public function setLanguages($languages)
    {
        $this->container['languages'] = $languages;

        return $this;
    }

    /**
     * Gets countries
     *
     * @return string[]|null
     */
    public function getCountries()
    {
        return $this->container['countries'];
    }

    /**
     * Sets countries
     *
     * @param string[]|null $countries countries
     *
     * @return $this
     */
    public function setCountries($countries)
    {
        $this->container['countries'] = $countries;

        return $this;
    }

    /**
     * Gets platforms
     *
     * @return string[]|null
     */
    public function getPlatforms()
    {
        return $this->container['platforms'];
    }

    /**
     * Sets platforms
     *
     * @param string[]|null $platforms platforms
     *
     * @return $this
     */
    public function setPlatforms($platforms)
    {
        $this->container['platforms'] = $platforms;

        return $this;
    }

    /**
     * Gets rating
     *
     * @return int|null
     */
    public function getRating()
    {
        return $this->container['rating'];
    }

    /**
     * Sets rating
     *
     * @param int|null $rating rating
     *
     * @return $this
     */
    public function setRating($rating)
    {
        $this->container['rating'] = $rating;

        return $this;
    }

    /**
     * Gets product_type
     *
     * @return string|null
     */
    public function getProductType()
    {
        return $this->container['product_type'];
    }

    /**
     * Sets product_type
     *
     * @param string|null $product_type product_type
     *
     * @return $this
     */
    public function setProductType($product_type)
    {
        $allowedValues = $this->getProductTypeAllowableValues();
        if (!is_null($product_type) && !in_array($product_type, $allowedValues, true)) {
            throw new \InvalidArgumentException(
                sprintf(
                    "Invalid value for 'product_type', must be one of '%s'",
                    implode("', '", $allowedValues)
                )
            );
        }
        $this->container['product_type'] = $product_type;

        return $this;
    }

    /**
     * Gets vat_product
     *
     * @return bool|null
     */
    public function getVatProduct()
    {
        return $this->container['vat_product'];
    }

    /**
     * Sets vat_product
     *
     * @param bool|null $vat_product vat_product
     *
     * @return $this
     */
    public function setVatProduct($vat_product)
    {
        $this->container['vat_product'] = $vat_product;

        return $this;
    }

    /**
     * Gets categories
     *
     * @return string[]|null
     */
    public function getCategories()
    {
        return $this->container['categories'];
    }

    /**
     * Sets categories
     *
     * @param string[]|null $categories categories
     *
     * @return $this
     */
    public function setCategories($categories)
    {
        $this->container['categories'] = $categories;

        return $this;
    }

    /**
     * Gets product_difference_hash
     *
     * @return int|null
     */
    public function getProductDifferenceHash()
    {
        return $this->container['product_difference_hash'];
    }

    /**
     * Sets product_difference_hash
     *
     * @param int|null $product_difference_hash product_difference_hash
     *
     * @return $this
     */
    public function setProductDifferenceHash($product_difference_hash)
    {
        $this->container['product_difference_hash'] = $product_difference_hash;

        return $this;
    }
    /**
     * Returns true if offset exists. False otherwise.
     *
     * @param integer $offset Offset
     *
     * @return boolean
     */
    public function offsetExists($offset)
    {
        return isset($this->container[$offset]);
    }

    /**
     * Gets offset.
     *
     * @param integer $offset Offset
     *
     * @return mixed
     */
    public function offsetGet($offset)
    {
        return isset($this->container[$offset]) ? $this->container[$offset] : null;
    }

    /**
     * Sets value based on offset.
     *
     * @param integer $offset Offset
     * @param mixed   $value  Value to be set
     *
     * @return void
     */
    public function offsetSet($offset, $value)
    {
        if (is_null($offset)) {
            $this->container[] = $value;
        } else {
            $this->container[$offset] = $value;
        }
    }

    /**
     * Unsets offset.
     *
     * @param integer $offset Offset
     *
     * @return void
     */
    public function offsetUnset($offset)
    {
        unset($this->container[$offset]);
    }

    /**
     * Gets the string presentation of the object
     *
     * @return string
     */
    public function __toString()
    {
        return json_encode(
            ObjectSerializer::sanitizeForSerialization($this),
            JSON_PRETTY_PRINT
        );
    }
}


